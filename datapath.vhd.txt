------------------------------------------
-- Datapath                             --
-- myMIPS                               --
-- Prof. Max Santana  (2022)            --
-- CEComp/Univasf                       --
------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity datapath is
  port(
    clk   	 : in std_logic;
    rst   	 : in std_logic;
    rs		 : in std_logic_vector(4 downto 0);
    rt		 : in std_logic_vector(4 downto 0);
    writeR	 : in std_logic_vector(4 downto 0);
    shamt	 : in std_logic_vector(10 downto 6);
    addr     : in std_logic_vector(25 downto 0);
    funct	 : in std_logic_vector(5 downto 0); 
    imm	     : in std_logic_vector(15 downto 0);
    alusrc	 : in std_logic;
    regwrite : in std_logic;
    dataRAM	 : in std_logic_vector(31 downto 0);
    memtoreg : in std_logic_vector(1 downto 0);
    aluop	 : in std_logic_vector(1 downto 0);
    imm32	 : out std_logic_vector(31 downto 0);
    writedata: out std_logic_vector(31 downto 0);
    result	 : out std_logic_vector(31 downto 0);
    zero	 : out std_logic;
    pass	 : out std_logic;
    
    --saida dos dados do registrador para permitir o jr
    jrsel : OUT std_logic_vector(31 downto 0);
    
    --entrada de dados para permitir o jal
    memd2 : in std_logic_vector(31 downto 0);
  );
end datapath;

architecture behv of datapath is
  signal w_imm32	: std_logic_vector(31 downto 0);
  signal w_read2	: std_logic_vector(31 downto 0);
  signal w_aluB		: std_logic_vector(31 downto 0);
  signal w_writeD	: std_logic_vector(31 downto 0);
  signal w_rd1		: std_logic_vector(31 downto 0);
  signal w_rd2		: std_logic_vector(31 downto 0);
  signal w_oper		: std_logic_vector(2 downto 0);
  signal w_result	: std_logic_vector(31 downto 0);
  signal w_zero		: std_logic;
  signal w_pass		: std_logic;
begin
  EXT32		: entity work.signextend port map (datain => imm, dataout => w_imm32);
  MUX1 		: entity work.MUX232 port map (d0 => w_rd2, d1 => w_imm32, s => alusrc, y => w_aluB);
  REGS		: entity work.registers port map (clock => clk, reset => rst, rr1 => rs, 
                                          rr2 => rt, rw => regwrite, wr => writeR, 
                                          wd => w_writeD, rd1 => w_rd1, rd2 => w_rd2);
  ALU		: entity work.alu port map (rega => w_rd1, regb => w_aluB, oper => w_oper, 
                                    result => w_result, zero => w_zero, pass => w_pass);
  ALUCONTROL: entity work.alucontrol port map (ALUOp => aluop, ff => funct, oper => w_oper);                       
  MUX2		: entity work.MUX3 port map (d0 => w_result, d1 => dataRAM, d2 => memd2, s => memtoreg, y => w_writeD);
  
  jrsel <= w_rd1;
  imm32 	<= w_imm32;
  writedata	<= w_rd2;
  result 	<= w_result;
  zero		<= w_zero;
  pass		<= w_pass;
end architecture behv;